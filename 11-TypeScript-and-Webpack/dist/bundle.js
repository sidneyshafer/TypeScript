(()=>{"use strict";class e{constructor(e,t,r,s){this.templateEl=document.getElementById(e),this.hostEl=document.getElementById(t);const n=document.importNode(this.templateEl.content,!0);this.element=n.firstElementChild,s&&(this.element.id=s),this.attach(r)}attach(e){this.hostEl.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}function t(e){var t;let r=!0,s="";return e.required&&(r=r&&0!==(null===(t=e.value)||void 0===t?void 0:t.toString().trim().length),r||(s="Required field")),null!=e.minLength&&"string"==typeof e.value&&(r=r&&e.value.length>e.minLength,r||(s="Character length must be greater than "+e.minLength)),null!=e.maxLength&&"string"==typeof e.value&&(r=r&&e.value.length<e.maxLength,r||(s="Character length must be less than "+e.maxLength)),null!=e.min&&"number"==typeof e.value&&(r=r&&e.value>e.min,r||(s="Values must be greater than "+e.min)),null!=e.max&&"number"==typeof e.value&&(r=r&&e.value<e.max,r||(s="Values must be less than "+e.max)),[r,s]}var r;!function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(r||(r={}));class s{constructor(e,t,r,s,n){this.id=e,this.title=t,this.description=r,this.people=s,this.status=n}}class n{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}class i extends n{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new i),this.instance}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}addProject(e,t,n){const i=new s(Math.random.toString(),e,t,n,r.Active);this.projects.push(i),this.updateListeners()}moveProject(e,t){const r=this.projects.find((t=>t.id===e));r&&r.status!==t&&(r.status=t,this.updateListeners())}}const l=i.getInstance();class a extends e{get persons(){return 1===this.project.people?"1 person":`${this.project.people} persons`}constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){}configure(){this.element.addEventListener("dragstart",this.dragStartHandler.bind(this)),this.element.addEventListener("dragend",this.dragEndHandler.bind(this))}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.persons+" assigned",this.element.querySelector("p").textContent=this.project.description}}class o extends e{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}renderProjects(){document.getElementById(`${this.type}-project-list`).innerHTML="";for(const e of this.assignedProjects)new a(this.element.querySelector("ul").id,e)}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){const t=e.dataTransfer.getData("text/plain"),s="active"===this.type?r.Active:r.Finished;l.moveProject(t,s)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler.bind(this)),this.element.addEventListener("dragleave",this.dragLeaveHandler.bind(this)),this.element.addEventListener("drop",this.dropHandler.bind(this)),l.addListener((e=>{const t=e.filter((e=>"active"===this.type?e.status===r.Active:e.status==r.Finished));this.assignedProjects=t,this.renderProjects()}))}renderContent(){const e=`${this.type}-project-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=this.type.toUpperCase()+" PROJECTS"}}new class extends e{constructor(){super("project-input","app",!0,"user-input"),this.titleInputEl=this.element.querySelector("#title"),this.descInputEl=this.element.querySelector("#description"),this.peopleInputEl=this.element.querySelector("#people"),this.titleErrorEl=this.element.querySelector("#title-error"),this.descErrorEl=this.element.querySelector("#description-error"),this.peopleErrorEl=this.element.querySelector("#people-error"),this.configure()}gatherUserInput(){const e=this.titleInputEl.value,r=this.descInputEl.value,s=this.peopleInputEl.value,n={value:e,required:!0},i={value:r,required:!0,minLength:5},l={value:+s,required:!0,min:0,max:5},[a,o]=t(n),[h,d]=t(i),[c,u]=t(l);return a&&h&&c?[e,r,+s]:(this.titleErrorEl.innerText=o,this.descErrorEl.innerText=d,void(this.peopleErrorEl.innerText=u))}configure(){this.element.addEventListener("submit",this.submitHandler.bind(this))}renderContent(){}clearInputs(){this.titleInputEl.value="",this.descInputEl.value="",this.peopleInputEl.value=""}clearErrors(){this.titleErrorEl.innerText="",this.descErrorEl.innerText="",this.peopleErrorEl.innerText=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,r,s]=t;l.addProject(e,r,s),this.clearInputs(),this.clearErrors()}}},new o("active"),new o("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,